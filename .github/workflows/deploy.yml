name: Deploy to AWS ECS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: water-requirement-predictor
  ECS_SERVICE: water-requirement-service
  ECS_CLUSTER: water-requirement-cluster
  ECS_TASK_DEFINITION: water-requirement-task
  CONTAINER_NAME: water-requirement-predictor

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create CloudWatch Log Group
      run: |
        aws logs create-log-group --log-group-name /ecs/${{ env.ECS_TASK_DEFINITION }} --region ${{ env.AWS_REGION }} || true

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Get deployment URLs
      id: get-urls
      run: |
        echo "🔄 Fetching current task public IP..."
        
        # Get the task ARN
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query 'taskArns[0]' --output text)
        
        if [ "$TASK_ARN" != "None" ] && [ -n "$TASK_ARN" ]; then
          # Get the network interface ID
          ENI_ID=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_ARN --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value | [0]" --output text)
          
          if [ "$ENI_ID" != "None" ] && [ -n "$ENI_ID" ]; then
            # Get the public IP
            PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
            
            if [ "$PUBLIC_IP" != "None" ] && [ -n "$PUBLIC_IP" ]; then
              echo "✅ Deployment successful!"
              echo "🌐 Public IP: $PUBLIC_IP"
              echo "📡 API URL: http://$PUBLIC_IP:8000"
              echo "📚 Swagger Docs: http://$PUBLIC_IP:8000/docs"
              echo ""
              echo "=== Access URLs ==="
              echo "Main API:     http://$PUBLIC_IP:8000"
              echo "API Docs:     http://$PUBLIC_IP:8000/docs"
              echo "Health Check: http://$PUBLIC_IP:8000"
              echo "=================="
              
              # Set outputs for potential use in other jobs
              echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
              echo "api_url=http://$PUBLIC_IP:8000" >> $GITHUB_OUTPUT
              echo "docs_url=http://$PUBLIC_IP:8000/docs" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Could not retrieve public IP (task may still be starting)"
            fi
          else
            echo "⚠️ Could not find network interface for task"
          fi
        else
          echo "⚠️ No running tasks found"
        fi

    - name: Test API endpoint
      run: |
        if [ -n "${{ steps.get-urls.outputs.public_ip }}" ]; then
          echo "🧪 Testing API endpoint..."
          sleep 30  # Wait for container to fully start
          
          # Test the health endpoint
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://${{ steps.get-urls.outputs.public_ip }}:8000" || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ API is responding (HTTP $HTTP_CODE)"
            echo "🎉 Deployment completed successfully!"
            echo ""
            echo "Your Water Requirement Predictor is now live at:"
            echo "🔗 ${{ steps.get-urls.outputs.api_url }}"
            echo "📖 Documentation: ${{ steps.get-urls.outputs.docs_url }}"
          else
            echo "⚠️ API returned HTTP $HTTP_CODE (may still be starting up)"
            echo "📍 Check logs if the issue persists: aws logs tail /ecs/${{ env.ECS_TASK_DEFINITION }}"
          fi
        else
          echo "⚠️ Skipping API test - no IP address available"
        fi
